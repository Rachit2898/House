{"ast":null,"code":"/* Copyright (c) 2018 Hampus Joakim Nilsson\n * Licensed via the MIT license.\n **/\n// Unique counter per COMPONENT that uniqueness is added to\nvar _globallyUniqueIdCounter = 0;\n\nfunction resetUniqueIds() {\n  _globallyUniqueIdCounter = 0;\n}\n\nfunction injectUniqueness(component) {\n  var instanceId;\n\n  if (arguments.length > 1) {\n    instanceId = arguments[1];\n\n    if (typeof instanceId !== 'string') {\n      console.log('Warning: Expected string as second argument passed to `injectUniqueness`');\n      instanceId = '' + instanceId;\n    }\n  } // Store all state in the closure for the member functions\n\n\n  var _render = component.render;\n  var _htmlIds = {};\n  var _uniqueIdCounter = 0;\n\n  var _uniqueInstance = instanceId || ++_globallyUniqueIdCounter; // Inject the following functions into the component\n\n\n  component.render = function () {\n    _uniqueIdCounter = 0;\n    return _render.apply(component);\n  };\n\n  component.nextUniqueId = function () {\n    ++_uniqueIdCounter;\n    return 'id-' + _uniqueInstance + '-' + _uniqueIdCounter;\n  };\n\n  component.lastUniqueId = function () {\n    return 'id-' + _uniqueInstance + '-' + _uniqueIdCounter;\n  };\n\n  component.getUniqueId = function (identifier) {\n    if (typeof identifier !== 'string') {\n      console.log('Warning: Expected string identifer passed to `getUniqueId`');\n      identifier = '' + identifier;\n    }\n\n    if (!_htmlIds[identifier]) {\n      _htmlIds[identifier] = 'id-' + _uniqueInstance + '-' + identifier;\n    }\n\n    return _htmlIds[identifier];\n  };\n}\n\nmodule.exports = {\n  resetUniqueIds: resetUniqueIds,\n  enableUniqueIds: injectUniqueness\n};","map":{"version":3,"sources":["/Users/rachitmishra/Desktop/personal/AssignmentProject/node_modules/react-html-id/index.js"],"names":["_globallyUniqueIdCounter","resetUniqueIds","injectUniqueness","component","instanceId","arguments","length","console","log","_render","render","_htmlIds","_uniqueIdCounter","_uniqueInstance","apply","nextUniqueId","lastUniqueId","getUniqueId","identifier","module","exports","enableUniqueIds"],"mappings":"AAAA;;;AAIA;AACA,IAAIA,wBAAwB,GAAG,CAA/B;;AAEA,SAASC,cAAT,GAA0B;AACtBD,EAAAA,wBAAwB,GAAG,CAA3B;AACH;;AAED,SAASE,gBAAT,CAA0BC,SAA1B,EAAqC;AAEjC,MAAIC,UAAJ;;AACA,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACtBF,IAAAA,UAAU,GAAGC,SAAS,CAAC,CAAD,CAAtB;;AACA,QAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAChCG,MAAAA,OAAO,CAACC,GAAR,CAAY,0EAAZ;AACAJ,MAAAA,UAAU,GAAG,KAAKA,UAAlB;AACH;AACJ,GATgC,CAWjC;;;AACA,MAAIK,OAAO,GAAGN,SAAS,CAACO,MAAxB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,gBAAgB,GAAG,CAAvB;;AACA,MAAIC,eAAe,GAAGT,UAAU,IAAI,EAAEJ,wBAAtC,CAfiC,CAiBjC;;;AACAG,EAAAA,SAAS,CAACO,MAAV,GAAmB,YAAY;AAC3BE,IAAAA,gBAAgB,GAAG,CAAnB;AACA,WAAOH,OAAO,CAACK,KAAR,CAAcX,SAAd,CAAP;AACH,GAHD;;AAKAA,EAAAA,SAAS,CAACY,YAAV,GAAyB,YAAY;AACjC,MAAEH,gBAAF;AACA,WAAO,QAAQC,eAAR,GAA0B,GAA1B,GAAgCD,gBAAvC;AACH,GAHD;;AAKAT,EAAAA,SAAS,CAACa,YAAV,GAAyB,YAAY;AACjC,WAAO,QAAQH,eAAR,GAA0B,GAA1B,GAAgCD,gBAAvC;AACH,GAFD;;AAIAT,EAAAA,SAAS,CAACc,WAAV,GAAwB,UAAUC,UAAV,EAAsB;AAC1C,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAChCX,MAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACAU,MAAAA,UAAU,GAAG,KAAKA,UAAlB;AACH;;AAED,QAAI,CAACP,QAAQ,CAACO,UAAD,CAAb,EAA2B;AACvBP,MAAAA,QAAQ,CAACO,UAAD,CAAR,GAAuB,QAAQL,eAAR,GAA0B,GAA1B,GAAgCK,UAAvD;AACH;;AAED,WAAOP,QAAQ,CAACO,UAAD,CAAf;AACH,GAXD;AAYH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACbnB,EAAAA,cAAc,EAAEA,cADH;AAEboB,EAAAA,eAAe,EAAEnB;AAFJ,CAAjB","sourcesContent":["/* Copyright (c) 2018 Hampus Joakim Nilsson\n * Licensed via the MIT license.\n **/\n\n// Unique counter per COMPONENT that uniqueness is added to\nvar _globallyUniqueIdCounter = 0\n\nfunction resetUniqueIds() {\n    _globallyUniqueIdCounter = 0\n}\n\nfunction injectUniqueness(component) {\n\n    var instanceId;\n    if (arguments.length > 1) {\n        instanceId = arguments[1];\n        if (typeof instanceId !== 'string') {\n            console.log('Warning: Expected string as second argument passed to `injectUniqueness`')\n            instanceId = '' + instanceId\n        }\n    }\n\n    // Store all state in the closure for the member functions\n    var _render = component.render\n    var _htmlIds = {}\n    var _uniqueIdCounter = 0\n    var _uniqueInstance = instanceId || ++_globallyUniqueIdCounter\n\n    // Inject the following functions into the component\n    component.render = function () {\n        _uniqueIdCounter = 0\n        return _render.apply(component)\n    }\n\n    component.nextUniqueId = function () {\n        ++_uniqueIdCounter\n        return 'id-' + _uniqueInstance + '-' + _uniqueIdCounter\n    }\n\n    component.lastUniqueId = function () {\n        return 'id-' + _uniqueInstance + '-' + _uniqueIdCounter\n    }\n\n    component.getUniqueId = function (identifier) {\n        if (typeof identifier !== 'string') {\n            console.log('Warning: Expected string identifer passed to `getUniqueId`')\n            identifier = '' + identifier\n        }\n\n        if (!_htmlIds[identifier]) {\n            _htmlIds[identifier] = 'id-' + _uniqueInstance + '-' + identifier\n        }\n\n        return _htmlIds[identifier]\n    }\n}\n\nmodule.exports = {\n    resetUniqueIds: resetUniqueIds,\n    enableUniqueIds: injectUniqueness,\n}\n"]},"metadata":{},"sourceType":"script"}